<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

        <!-- Aearch for property file -->
        <context:property-placeholder location="classpath*:/spring-bean-config/database.properties"/>

        <!--Datasource for mysql-->
        <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
                   destroy-method="close">
              <beans:property name="driverClassName" value="${mysql.driver}" />
              <beans:property name="url" value="${mysql.url}" />
              <beans:property name="username" value="${mysql.username}" />
              <beans:property name="password" value="${mysql.password}" />
              <beans:property name="maxActive" value="100"></beans:property>
              <beans:property name="maxIdle" value="30"></beans:property>
              <beans:property name="maxWait" value="300"></beans:property>
              <beans:property name="defaultAutoCommit" value="true"></beans:property>
        </beans:bean>

        <!-- Configuring RoleVoter bean to use custom access roles, by default roles
           should be in the form ROLE_{XXX} -->
        <beans:bean id="roleVoter"
                   class="org.springframework.security.access.vote.RoleVoter">
              <beans:property name="rolePrefix" value=""></beans:property>
        </beans:bean>

        <beans:bean id="accessDecisionManager"
                   class="org.springframework.security.access.vote.AffirmativeBased">
              <beans:constructor-arg name="decisionVoters"
                                     ref="roleVoter" />
        </beans:bean>

        <!-- Spring Security采用就近原则,有多个约束时,从上至下只要找到第一条满足就返回,因此因该将最严格的约束放在最前面,而将最宽松的约束放在最后面.auto-config属性可以让spring security为我们自动配置几种常用的权限控制机制，包括form,anonymous, rememberMe等。当然你也可以手工配置。-->

        <!-- 第一种，使用本地role-->
        <!--<http access-decision-manager-ref="accessDecisionManager">-->
        <!-- 第二种，通过数据库查询role -->
        <http authentication-manager-ref="jdbc-auth">
              <!--<intercept-url pattern="/person**" />-->
              <intercept-url pattern="/person**" access="hasRole('ROLE_ADMIN')"/>
              <form-login login-page="/login" authentication-failure-url="/denied"
                          username-parameter="username" password-parameter="password"
                          default-target-url="/persons" />
              <logout invalidate-session="true" logout-success-url="/login"
                      logout-url="/j_spring_security_logout" />
              <access-denied-handler error-page="/denied"/>
              <session-management invalid-session-url="/login">
                     <concurrency-control max-sessions="1"
                                          expired-url="/login" />
              </session-management>
        </http>

        <!-- 存在内存的授权管理 -->
        <authentication-manager id="in-memory-auth">
              <authentication-provider>
                     <user-service>
                            <user name="admin" password="admin" authorities="ROLE_ADMIN" />
                     </user-service>
              </authentication-provider>
        </authentication-manager>


        <!-- 使用数据库作为权限管理的来源,data-source-ref指定了数据源,所指定的数据源必须包含users, authorities表,并符合security的定义规范 -->
        <authentication-manager id="jdbc-auth">
              <!--<authentication-provider user-service-ref="authService"></authentication-provider>-->
              <!--<authentication-provider ref="authenticationProvider"></authentication-provider>-->
            <authentication-provider user-service-ref="userDetailService"></authentication-provider>
        </authentication-manager>
        <!--<authentication-manager id="jdbc-auth">-->
              <!--<authentication-provider>-->
                     <!--<jdbc-user-service data-source-ref="dataSource"-->
                                        <!--users-by-username-query="select username,pass,true from Users where username = ?"-->
                                        <!--authorities-by-username-query="select username,enabled from Users where username = ?" />-->
              <!--</authentication-provider>-->
        <!--</authentication-manager>-->

        <beans:bean id="userDetailService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
            <beans:property name="dataSource" ref="dataSource"></beans:property>
        </beans:bean>

        <beans:bean id="authService" class="com.journaldev.spring.service.AuthService"></beans:bean>

        <beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
            <beans:property name="hideUserNotFoundExceptions" value="false" />
            <beans:property name="userDetailsService" ref="authService" />
            <beans:property name="saltSource" ref="saltSource" />
        </beans:bean>

        <!-- 配置密码加密类 -->
        <beans:bean id="passwordEncode" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
        <beans:bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
            <beans:property name="userPropertyToUse" value="username"/>
        </beans:bean>

</beans:beans>